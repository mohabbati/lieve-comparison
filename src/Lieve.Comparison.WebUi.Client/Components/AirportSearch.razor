@using Lieve.Comparison.Application.Airports.Queries.GetAirports
@using Lieve.Comparison.Core.Enums
@using Lieve.Comparison.WebUi.Client.Services.Interfaces
@inject IAirportClient AirportClient
@* @attribute [StreamRendering] *@
@* @rendermode InteractiveAuto *@

<h3>AirportSearch</h3>

<p>This component demonstrates searching airports.</p>
<input @bind="searchClause" @oninput="async e => await GetAirports(e.Value.ToString())" type="text" placeholder="Enter...">
@* <button @onclick="async () => await GetAirports()">Search</button> *@


@if (Airports == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>IataCode</th>
                <th>Name</th>
                <th>City</th>
                <th>Country</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var airport in Airports)
            {
                <tr>
                    <td>@airport.IataCode</td>
                    <td>@airport.Name</td>
                    <td>@airport.CityName</td>
                    <td>@airport.CountryName</td>
                </tr>
            }
        </tbody>
    </table>
}

@code
{
    private string searchClause;

    private List<AirportDto>? Airports { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Airports = await GetAirports(string.Empty);
    }

    private async Task<List<AirportDto>> GetAirports(string input)
    {
        var response = await AirportClient.GetAsync(LocalityType.International, input);
        Airports = response;

        return response;
    }
}
